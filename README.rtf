{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 animatedScroller.sh / scroller README:\
\
To use:\
\
from anywhere on the machine, enter: \'93scroller -s SPEED -o OUTPUT -i input1 (input2 input3\'85)\'94\
\
where:\
\
SPEED = an integer number of images to render per second in the movie. 25 is a bit slow, 45 may be a bit fast, the sweet spot is somewhere between.\
\
OUTPUT = a file location ending in \'93.mov\'94 relative to where you are for the output file\
\
input1/2/3 = either one PDF with multiple pages (not implemented yet) or a series of PNG files to use as input. They will be stacked vertically in the order they are declared in this script.\
\
\
Thus:\
\
If /Users/vp2 looks like:\
\
-test1.png\
-test2.png\
-test3.png\
\
\'85and the command \'93scroller -s 35 -o test.mov -i test1.png test2.png test3.png\'94 is run, /Users/vp2 will look like:\
\
-test.mov\
-test1.png\
-test2.png\
-test3.png\
\
\'85after a while. This script takes a LONG time to run and will update you on where in image rendering (every ten images)/video compiling(every .5 seconds) it is throughout.\
\
Ask Andrew Horwitz (ahwitz@gmail.com) if there are any questions.}